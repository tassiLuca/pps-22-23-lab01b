@startuml uml-class

package src.model {
    interface StaticEntity {
        +getPosition(): Position
    }
    class StaticEntityImpl implements StaticEntity

    interface MovableEntity extends StaticEntity {
        +moveTo(newPosition: Position): boolean
    }
    class MovableEntityImpl implements MovableEntity
    MovableEntityImpl -up-|> StaticEntityImpl

    interface MovementStrategy {
        +isMovementFeasible(): boolean
    }

    MovableEntityImpl o-right-> MovementStrategy

    interface EntityFactory {
        +createPawn(): StaticEntity
        +createKnight(): MovableEntity
    }
    EntityFactory::createPawn ..> StaticEntity: <<creates>>
    EntityFactory::createKnight ..> MovableEntity : <<creates>>

    interface Grid {
        +getPawnsPositions(): Set<Position>
        +getKnightPosition(): Position
        +moveKnight(newPosition: Position)
    }
    class GridImpl implements Grid
    GridImpl *-right-> StaticEntity
    GridImpl *--> MovableEntity

    interface GridFactory {
        +createWithSingleKnightAndPawn(width: int, height: int): Grid
        +createWithKnightAndMultiplePawn(width: int, height: int, numberOfPawns: int)
    }
    class GridFactoryImpl implements GridFactory
    GridFactoryImpl ..> Grid : <<creates>>
}

package src.controller {
    interface Logics {
        +hit(newPosition: Position)
        +isOver(): boolean
        +getKnightPosition(): Position
        +getPawnsPosition(): Set<Position>
    }

    class LogicsImpl implements Logics

    LogicsImpl *-right-> Grid
}

@enduml